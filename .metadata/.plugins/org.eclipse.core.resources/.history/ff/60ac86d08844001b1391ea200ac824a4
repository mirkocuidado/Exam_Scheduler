package main;


import java.io.FileWriter;
import java.io.IOException;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Set;

import generals.Exam;
import generals.Room;
import generals.Termin;
import readfile.ReadFileRok;
import readfile.ReadFileRooms;

public class Main {

	public static void main(String[] argv) {
		String roomss;
		String rok;
		String resenjeFileName = "result.txt";
		
		FileWriter myWriter = null;
		
		try {
			myWriter = new FileWriter(resenjeFileName);
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		if (argv.length < 2 || argv.length > 3) {
			System.out.println("Neodgovarajuci broj ulaznih parametara");
			return;
		}
		
		roomss = argv[0];
		rok = argv[1];
		
		ReadFileRooms readFileRooms = new ReadFileRooms(roomss);
		ReadFileRok readFileRok = new ReadFileRok(rok);
		
		List<Room> rooms = readFileRooms.getRooms();
		List<Exam> exams = readFileRok.getExams();
		
		String termins[] = { "08:00", "11:30", "15:00", "18:30" };
		int duration = readFileRok.getDuration();
		
		CSP_Algorithm csp = new CSP_Algorithm();
		
		csp.initialDomain(exams, rooms, termins, duration);
		
		int level = 0;
		
		boolean solution = false;
		
		solution = csp.algorithm(exams, exams.size(), level, null);
		
		
		
		
		for(int day = 0; day < duration; ++day) {
		
			String [][] matrix = new String[5][rooms.size()+1];
			
			matrix[0][0] = "Dan" + day;
			
			for(int i = 1; i < 5; i++) {
				matrix[i][0] = termins[i-1]; 
			}
			
			for(int j=1; j<rooms.size()+1; j++) {
				matrix[0][j] = rooms.get(j-1).getName();
			}
		
			HashMap<Exam, List<Termin>> final_solution = CSP_Algorithm.solution;
			
			Set<Exam> exams_output = final_solution.keySet();

			for(int row = 1; row < 5; ++row) {
				for(int column = 1; column < rooms.size()+1; ++column) {
					
					for(Exam e : exams_output) {
						
						if(e.getDayOfTrial() == day) {
							
							for(Termin t : final_solution.get(e)) {
								
								if(t.getRoom().getName() == matrix[0][column] && t.getTime().equals(matrix[row][0])) {
									
									matrix[row][column] = e.getExamCodee();
								}
							}
							
							
						}
						
					}
					
				
				}
			}
			
			for(int i = 0; i < 5; i++) {
				for(int j = 0; j < rooms.size()+1; j++) {
					if(matrix[i][j]!=null) {
						System.out.print("X,");
					}
					else {
						System.out.println(matrix[i][j] + ",");
					}
				}
			}
			
			
		}
		
		
		/*for(Exam e:exams_output) {
			if(i == e.getDayOfTrial()) {
				
				List<Termin> tt = CSP_Algorithm.solution.get(e);
				
				try {
					myWriter.write("Dan" + i+ ",");
					
					for(int j = 0; j < rooms.size()-1; j++) {
						
						Room r = rooms.get(j);
						
						myWriter.write(r.getName() + "," );
						
						
					}
					
					
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
				
				
				int num = 0;
				for(Termin t: tt) {
					num += t.getRoom().getCapacity();
					System.out.println(t.getDay() + "-" + t.getRoom().getName() + " - " + t.getTime());
				}
				System.out.println(num + "/" + e.getNumberOfSignedStudents());
				System.out.println();
			}
		}
		
		try {
			myWriter.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}*/
		
		
		
		return;
	}
}
